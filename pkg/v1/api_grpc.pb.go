// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AxonClient is the client API for Axon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AxonClient interface {
	GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Version, error)
	CreateObservation(ctx context.Context, in *CreateObservationInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type axonClient struct {
	cc grpc.ClientConnInterface
}

func NewAxonClient(cc grpc.ClientConnInterface) AxonClient {
	return &axonClient{cc}
}

func (c *axonClient) GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := c.cc.Invoke(ctx, "/axon.api.v1.axon/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *axonClient) CreateObservation(ctx context.Context, in *CreateObservationInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/axon.api.v1.axon/CreateObservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AxonServer is the server API for Axon service.
// All implementations must embed UnimplementedAxonServer
// for forward compatibility
type AxonServer interface {
	GetVersion(context.Context, *emptypb.Empty) (*Version, error)
	CreateObservation(context.Context, *CreateObservationInput) (*emptypb.Empty, error)
	mustEmbedUnimplementedAxonServer()
}

// UnimplementedAxonServer must be embedded to have forward compatible implementations.
type UnimplementedAxonServer struct {
}

func (UnimplementedAxonServer) GetVersion(context.Context, *emptypb.Empty) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedAxonServer) CreateObservation(context.Context, *CreateObservationInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObservation not implemented")
}
func (UnimplementedAxonServer) mustEmbedUnimplementedAxonServer() {}

// UnsafeAxonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AxonServer will
// result in compilation errors.
type UnsafeAxonServer interface {
	mustEmbedUnimplementedAxonServer()
}

func RegisterAxonServer(s grpc.ServiceRegistrar, srv AxonServer) {
	s.RegisterService(&Axon_ServiceDesc, srv)
}

func _Axon_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AxonServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axon.api.v1.axon/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AxonServer).GetVersion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Axon_CreateObservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObservationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AxonServer).CreateObservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axon.api.v1.axon/CreateObservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AxonServer).CreateObservation(ctx, req.(*CreateObservationInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Axon_ServiceDesc is the grpc.ServiceDesc for Axon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Axon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "axon.api.v1.axon",
	HandlerType: (*AxonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _Axon_GetVersion_Handler,
		},
		{
			MethodName: "CreateObservation",
			Handler:    _Axon_CreateObservation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
